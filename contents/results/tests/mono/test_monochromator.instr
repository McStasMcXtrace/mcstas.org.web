% Test of the monochromator component.
%

DEFINE INSTRUMENT test_monochromator(OMM,TTM)

DECLARE
%{

/* Number of neutrons to send through. */
#define RUNNUM 1000000
int run_num;

#define mono_mosh (30*MIN2RAD)
#define mono_mosv (30*MIN2RAD)
#define mono_q 1.87325*AA2MS

/* Global correction factor */
double MC_correction;

char *PSD1_name = "testresults/monochromator1.psd";
char *PSD2_name = "testresults/monochromator2.psd";
char *PSD_4pi_name = "testresults/monochromator_4pi.psd";
char *V_name = "testresults/monochromator.v";
/* Our main() function. */
int
main(int argc, char *argv[])
{
  mcreadparams();
  srandom(time(NULL));
  mcinit();
  while(run_num < RUNNUM)
  {
    mcsetstate(0, 0, 0, 0, 0, 1, 0, 0, 0, 1);
    mcraytrace();
    run_num++;
  }
  mcfinally();
  return 0;
}

%}

INITIALIZE
%{
  MC_correction = 1;  /* Scale factor is initially unity */
  run_num = 0;         /* Initialize mc neutron counter. */
%}

COMPONENT a1 = Axis()
  AT (0,0,0) ABSOLUTE

COMPONENT source = Source_aim(radius=0,
			  dist=2,
		          xw=0.02, yh=0.02, 
			  v0=1000, dv=200)
  AT (0,0,0) RELATIVE a1
  ROTATED (0,0,0) RELATIVE a1

COMPONENT slit1 = Slit(xmin = -0.01, xmax = 0.01, ymin = -0.01, ymax = 0.01)
  AT (0,0,2) RELATIVE a1 ROTATED (0,0,0) RELATIVE a1

COMPONENT mono = Monochromator(zmin=-0.035, zmax=0.035, 
                   ymin=-0.05, ymax=0.05,
                   mosaich=EXTERN mono_mosh, mosaicv=EXTERN mono_mosv,
                   r0=0.6, Q=EXTERN mono_q)
  AT (0,0,0.2) RELATIVE slit1
  ROTATED (0,OMM,0) RELATIVE a1

COMPONENT PSD_4pi = PSD_monitor_4PI(radius=0.1, nx=101, ny=51,
         PSD_p=EXTERN PSD_4pi_p, PSD_N=EXTERN PSD_4pi_N,
	 filename=EXTERN PSD_4pi_name)
  AT (0,0,0) RELATIVE mono ROTATED (0,0,0) RELATIVE a1

COMPONENT a2 = Axis()
  AT (0,0,0) RELATIVE mono
  ROTATED (0,TTM,0) RELATIVE a1

COMPONENT PSD1 = PSD_monitor(xmin=-0.03, xmax=0.03,
          ymin =-0.03, ymax=0.03, nx=60, ny=60,
         PSD_p=EXTERN PSD1_p, PSD_N=EXTERN PSD1_N,
         m1x=EXTERN PSD1_m1x, m1y=EXTERN PSD1_m1y, m2x=EXTERN PSD1_m2x, m2y=EXTERN PSD1_m2y,
	 filename=EXTERN PSD1_name)
  AT (0,0,0.4) RELATIVE a2 ROTATED (0,0,0) RELATIVE a2

COMPONENT slit2 = Slit(xmin = -0.01, xmax = 0.01, ymin = -0.01, ymax = 0.01)
  AT (0,0,0.5) RELATIVE a2 ROTATED (0,0,0) RELATIVE a2

COMPONENT V_Mon = v_monitor(xmin = -0.1, xmax=0.1, ymin =-0.1, ymax=0.1, n=60,
			    vmin = 1000, vmax = 1060, filename = EXTERN V_name)
  AT (0,0,0.1) RELATIVE slit2
  ROTATED (0,0,0) RELATIVE a2

COMPONENT PSD2 = PSD_monitor(xmin=-0.0125, xmax=0.0125,
          ymin =-0.0125, ymax=0.0125, nx=100, ny=100,
         PSD_p=EXTERN PSD2_p, PSD_N=EXTERN PSD2_N,
         m1x=EXTERN PSD2_m1x, m1y=EXTERN PSD2_m1y, m2x=EXTERN PSD2_m2x, m2y=EXTERN PSD2_m2y,
	 filename=EXTERN PSD2_name)
  AT (0,0,0.1) RELATIVE slit2
  ROTATED (0,0,0) RELATIVE a2

COMPONENT SNG_4PI = Monitor_4PI(Nsum = EXTERN SNG_4PI_N, psum = EXTERN SNG_4PI_p)
     AT (0,0,1) RELATIVE a2 ROTATED (0,0,0) RELATIVE a2

FINALLY
%{
  printf("Finished simulation of %d neutrons.\n", run_num);
  printf("Correction factor: %g \n",MC_correction);
/*   printf("Moments: %g %g %g %g\n", PSD_m1x, PSD_m2x, PSD_m1y, PSD_m2y); */
%}

END
