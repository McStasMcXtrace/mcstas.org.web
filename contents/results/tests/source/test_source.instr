% Test of the source components (and the PSD detectors).
%

DEFINE INSTRUMENT test_source()

DECLARE
%{

/* Number of neutrons to send through. */
#define RUNNUM 100000
int run_num;

#include "instr_parms/TAS1.h"

#define source_v0 977.9    /* Which is 5.0 meV */
#define source_dv 20        /* dE = 0.2 meV */

/* Global correction factor */
double MC_correction;

char *PSD_4pi_name = "testresults/source_4pi.psd";
char *PSD_name = "testresults/source.psd";
char *V_name = "testresults/source.v";

/* Our main() function. */
int
main(int argc, char *argv[])
{
  mcreadparams();
  mcinit();
  while(run_num < RUNNUM)
  {
    mcsetstate(0, 0, 0, 0, 0, 1, 0, 0, 0, 1);
    mcraytrace();
    run_num++;
  }
  mcfinally();
  return 0;
}

%}

INITIALIZE
%{
  MC_correction = 1;  /* Scale factor is initially unity */
  run_num = 0;         /* Initialize mc neutron counter. */
%}

COMPONENT a1 = Axis()
  AT (0,0,0) ABSOLUTE

COMPONENT source = Source_aim(radius=0.1,
			  dist=1,
		          xw=0.1, yh=0.2, 
			  v0=1000, dv=200)
  AT (0,0,0) RELATIVE a1
  ROTATED (0,0,0) RELATIVE a1

COMPONENT PSD_4pi = PSD_monitor_4PI(radius=1, nx=101, ny=51,
         PSD_p=EXTERN PSD_2pi_p, PSD_N=EXTERN PSD_2pi_N,
	 filename=EXTERN PSD_4pi_name)
  AT (0,0,0) RELATIVE a1
  ROTATED (0,0,0) RELATIVE a1

COMPONENT PSD = PSD_monitor(xmin=-0.1, xmax=0.1,
          ymin =-0.15, ymax=0.15, nx=100, ny=150,
         PSD_p=EXTERN PSD_p, PSD_N=EXTERN PSD_N,
         m1x=EXTERN PSD_m1x, m1y=EXTERN PSD_m1y, m2x=EXTERN PSD_m2x, m2y=EXTERN PSD_m2y,
	 filename=EXTERN PSD_name)
  AT (0,0,1) RELATIVE a1
  ROTATED (0,0,0) RELATIVE a1

COMPONENT V_Mon = v_monitor(xmin = -0.1, xmax=0.1, ymin =-0.15, ymax=0.15, n=200,
			    vmin = 0, vmax = 2000, filename = EXTERN V_name)
  AT (0,0,1) RELATIVE a1
  ROTATED (0,0,0) RELATIVE a1

COMPONENT SNG = Monitor(xmin = -0.1, xmax=0.1, ymin =-0.15, ymax=0.15,
			    psum = EXTERN SNG_p, Nsum = EXTERN SNG_N)
     AT (0,0,1) RELATIVE a1 ROTATED (0,0,0) RELATIVE a1

COMPONENT SNG_4PI = Monitor_4PI(Nsum = EXTERN SNG_4PI_N, psum = EXTERN SNG_4PI_p)
     AT (0,0,1) RELATIVE a1 ROTATED (0,0,0) RELATIVE a1

FINALLY
%{
  printf("Finished simulation of %d neutrons.\n", run_num);
  printf("Correction factor: %g \n",MC_correction);
/*   printf("Moments: %g %g %g %g\n", PSD_m1x, PSD_m2x, PSD_m1y, PSD_m2y); */
%}

END
